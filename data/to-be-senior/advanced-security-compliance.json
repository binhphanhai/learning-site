{
  "title": "Advanced Security & Compliance",
  "description": "Master security architecture, threat modeling, compliance frameworks, secure development lifecycle, identity management, and data protection for enterprise-level security",
  "sections": [
    {
      "id": "security-architecture",
      "title": "Security Architecture & Threat Modeling",
      "content": [
        {
          "type": "heading",
          "text": "Security by Design Principles"
        },
        {
          "type": "paragraph",
          "text": "Implementing security architecture that follows defense-in-depth strategies, zero-trust principles, and proactive threat modeling to protect against evolving security threats."
        },
        {
          "type": "list",
          "items": [
            "Zero-trust architecture implementation with continuous verification",
            "Defense-in-depth layered security controls",
            "Threat modeling using STRIDE methodology",
            "Security control validation and testing",
            "Risk assessment and mitigation strategies"
          ]
        },
        {
          "type": "code",
          "language": "javascript",
          "text": "class SecurityArchitecture {\n  constructor() {\n    this.threatModel = new Map();\n    this.securityControls = new Map();\n    this.riskAssessments = new Map();\n  }\n\n  async performThreatModeling(system) {\n    const threats = {\n      spoofing: await this.identifySpoofingThreats(system),\n      tampering: await this.identifyTamperingThreats(system),\n      repudiation: await this.identifyRepudiationThreats(system),\n      informationDisclosure: await this.identifyDisclosureThreats(system),\n      denialOfService: await this.identifyDoSThreats(system),\n      elevationOfPrivilege: await this.identifyPrivilegeThreats(system)\n    };\n    \n    const riskMatrix = this.calculateRiskMatrix(threats);\n    const mitigations = await this.generateMitigations(threats);\n    \n    return {\n      threats,\n      riskMatrix,\n      mitigations,\n      recommendations: this.prioritizeRecommendations(riskMatrix)\n    };\n  }\n\n  implementZeroTrust() {\n    return {\n      principles: [\n        'Never trust, always verify',\n        'Assume breach mentality',\n        'Verify explicitly with context',\n        'Use least privilege access',\n        'Minimize blast radius'\n      ],\n      implementation: {\n        identityVerification: this.setupMultiFactorAuth(),\n        deviceCompliance: this.enforceDeviceCompliance(),\n        networkSegmentation: this.implementMicroSegmentation(),\n        dataProtection: this.setupDataClassification()\n      }\n    };\n  }\n}"
        }
      ]
    },
    {
      "id": "compliance-frameworks",
      "title": "Compliance Frameworks & Standards",
      "content": [
        {
          "type": "heading",
          "text": "GDPR Implementation & Data Privacy"
        },
        {
          "type": "paragraph",
          "text": "Comprehensive GDPR compliance implementation ensuring data protection by design and by default, with automated privacy controls and audit capabilities."
        },
        {
          "type": "code",
          "language": "javascript",
          "text": "class GDPRComplianceManager {\n  constructor() {\n    this.dataInventory = new Map();\n    this.consentManagement = new ConsentManager();\n    this.dataProcessingActivities = new Map();\n  }\n\n  async implementDataProtectionByDesign() {\n    const controls = {\n      dataMinimization: await this.setupDataMinimization(),\n      purposeLimitation: await this.enforcePurposeLimitation(),\n      storageMinimization: await this.implementRetentionPolicies(),\n      accuracyControls: await this.setupDataQualityControls(),\n      integrityControls: await this.implementIntegrityChecks(),\n      confidentialityControls: await this.setupEncryption()\n    };\n    \n    return controls;\n  }\n\n  async handleDataSubjectRights(request) {\n    const supportedRights = {\n      access: () => this.provideDataAccess(request.subjectId),\n      rectification: () => this.correctData(request.subjectId, request.corrections),\n      erasure: () => this.deleteData(request.subjectId),\n      portability: () => this.exportData(request.subjectId),\n      restriction: () => this.restrictProcessing(request.subjectId),\n      objection: () => this.stopProcessing(request.subjectId)\n    };\n    \n    const rightType = request.rightType;\n    if (!supportedRights[rightType]) {\n      throw new Error(`Unsupported right: ${rightType}`);\n    }\n    \n    return await supportedRights[rightType]();\n  }\n}"
        }
      ]
    },
    {
      "id": "secure-development",
      "title": "Secure Development Lifecycle",
      "content": [
        {
          "type": "heading",
          "text": "Security Testing Integration"
        },
        {
          "type": "paragraph",
          "text": "Integrating security testing throughout the development lifecycle with automated SAST, DAST, dependency scanning, and security code review processes."
        },
        {
          "type": "code",
          "language": "javascript",
          "text": "class SecureSDLC {\n  constructor() {\n    this.securityGates = new Map();\n    this.vulnerabilityDatabase = new Map();\n    this.securityMetrics = new Map();\n  }\n\n  async setupSecurityPipeline() {\n    const pipeline = {\n      preCommit: {\n        secretScanning: await this.setupSecretScanning(),\n        staticAnalysis: await this.setupSAST(),\n        dependencyCheck: await this.setupDependencyScanning()\n      },\n      build: {\n        containerScanning: await this.setupContainerScanning(),\n        licenseCompliance: await this.setupLicenseScanning()\n      },\n      deploy: {\n        dynamicAnalysis: await this.setupDAST(),\n        penetrationTesting: await this.setupPenTesting(),\n        configurationScanning: await this.setupConfigScanning()\n      }\n    };\n    \n    return pipeline;\n  }\n\n  async performSecurityCodeReview(pullRequest) {\n    const securityChecklist = [\n      { check: 'Input validation implemented', category: 'injection' },\n      { check: 'Authentication properly implemented', category: 'auth' },\n      { check: 'Authorization checks in place', category: 'access' },\n      { check: 'Sensitive data encrypted', category: 'crypto' },\n      { check: 'Error handling secure', category: 'disclosure' },\n      { check: 'Logging configured properly', category: 'monitoring' }\n    ];\n    \n    const results = await Promise.all(\n      securityChecklist.map(item => this.validateSecurityControl(pullRequest, item))\n    );\n    \n    return {\n      passed: results.filter(r => r.status === 'pass').length,\n      failed: results.filter(r => r.status === 'fail').length,\n      details: results,\n      recommendation: this.generateSecurityRecommendation(results)\n    };\n  }\n}"
        }
      ]
    },
    {
      "id": "identity-access-management",
      "title": "Identity & Access Management",
      "content": [
        {
          "type": "heading",
          "text": "Advanced OAuth2/OIDC Implementation"
        },
        {
          "type": "paragraph",
          "text": "Implementing enterprise-grade identity and access management with advanced OAuth2 flows, RBAC, session management, and SSO integration."
        },
        {
          "type": "code",
          "language": "javascript",
          "text": "class AdvancedIAM {\n  constructor() {\n    this.identityProviders = new Map();\n    this.accessPolicies = new Map();\n    this.sessionManager = new SessionManager();\n  }\n\n  async implementOAuth2PKCE() {\n    const pkceFlow = {\n      generateCodeChallenge: () => {\n        const codeVerifier = this.generateCodeVerifier();\n        const codeChallenge = this.sha256Base64Url(codeVerifier);\n        return { codeVerifier, codeChallenge };\n      },\n      \n      initiateAuthFlow: async (clientId, redirectUri, scope, state) => {\n        const { codeVerifier, codeChallenge } = this.generateCodeChallenge();\n        \n        const authUrl = this.buildAuthorizationUrl({\n          clientId,\n          redirectUri,\n          scope,\n          state,\n          codeChallenge,\n          codeChallengeMethod: 'S256'\n        });\n        \n        this.storeCodeVerifier(state, codeVerifier);\n        return authUrl;\n      },\n      \n      exchangeCodeForToken: async (code, state, clientId) => {\n        const codeVerifier = this.retrieveCodeVerifier(state);\n        \n        const tokenResponse = await this.exchangeAuthorizationCode({\n          code,\n          clientId,\n          codeVerifier\n        });\n        \n        return this.validateAndParseTokens(tokenResponse);\n      }\n    };\n    \n    return pkceFlow;\n  }\n\n  async implementRBAC() {\n    const rbacSystem = {\n      roles: new Map(),\n      permissions: new Map(),\n      userRoles: new Map(),\n      \n      defineRole: (roleName, permissions) => {\n        this.rbacSystem.roles.set(roleName, {\n          name: roleName,\n          permissions: new Set(permissions),\n          inherits: []\n        });\n      },\n      \n      checkPermission: (userId, resource, action) => {\n        const userRoles = this.rbacSystem.userRoles.get(userId) || [];\n        \n        for (const roleName of userRoles) {\n          const role = this.rbacSystem.roles.get(roleName);\n          if (role && this.roleHasPermission(role, resource, action)) {\n            return true;\n          }\n        }\n        \n        return false;\n      }\n    };\n    \n    return rbacSystem;\n  }\n}"
        }
      ]
    },
    {
      "id": "data-protection",
      "title": "Data Protection & Encryption",
      "content": [
        {
          "type": "heading",
          "text": "Encryption Strategies & Key Management"
        },
        {
          "type": "paragraph",
          "text": "Implementing comprehensive data protection with encryption at rest and in transit, secure key management, and data classification systems."
        },
        {
          "type": "code",
          "language": "javascript",
          "text": "class DataProtectionManager {\n  constructor() {\n    this.encryptionKeys = new Map();\n    this.dataClassification = new Map();\n    this.keyRotationSchedule = new Map();\n  }\n\n  async implementEncryptionAtRest() {\n    const encryptionStrategy = {\n      databaseEncryption: {\n        transparentDataEncryption: true,\n        columnLevelEncryption: this.setupColumnEncryption(),\n        keyManagement: this.setupDatabaseKeyManagement()\n      },\n      \n      fileSystemEncryption: {\n        fullDiskEncryption: true,\n        fileBasedEncryption: this.setupFileEncryption(),\n        backupEncryption: this.setupBackupEncryption()\n      },\n      \n      applicationLevelEncryption: {\n        fieldLevelEncryption: this.setupFieldEncryption(),\n        tokenization: this.setupTokenization(),\n        formatPreservingEncryption: this.setupFPE()\n      }\n    };\n    \n    return encryptionStrategy;\n  }\n\n  async setupKeyManagement() {\n    const keyManagement = {\n      keyGeneration: {\n        algorithm: 'AES-256-GCM',\n        keyDerivation: 'PBKDF2',\n        randomness: 'CSPRNG'\n      },\n      \n      keyStorage: {\n        hsm: this.setupHSM(),\n        keyVault: this.setupKeyVault(),\n        envelopeEncryption: this.setupEnvelopeEncryption()\n      },\n      \n      keyRotation: {\n        automaticRotation: true,\n        rotationFrequency: '90-days',\n        gracePeriod: '30-days',\n        rollbackCapability: true\n      },\n      \n      keyEscrow: {\n        enabled: true,\n        splitKeyShares: 5,\n        requiredShares: 3,\n        auditTrail: true\n      }\n    };\n    \n    return keyManagement;\n  }\n\n  async classifyData(data) {\n    const classificationRules = {\n      public: /^(marketing|blog|documentation)$/i,\n      internal: /^(employee|business|operational)$/i,\n      confidential: /^(financial|legal|strategic)$/i,\n      restricted: /^(personal|medical|payment)$/i\n    };\n    \n    const classification = this.determineClassification(data, classificationRules);\n    \n    return {\n      classification,\n      protectionRequirements: this.getProtectionRequirements(classification),\n      retentionPolicy: this.getRetentionPolicy(classification),\n      accessControls: this.getAccessControls(classification)\n    };\n  }\n}"
        }
      ]
    }
  ],
  "testQuestions": [
    {
      "id": 1,
      "question": "What is the core principle of Zero Trust architecture?",
      "options": [
        "Trust all internal network traffic",
        "Never trust, always verify every access request",
        "Only verify external connections",
        "Trust based on network location"
      ],
      "correctAnswer": 1,
      "explanation": "Zero Trust architecture operates on the principle of 'never trust, always verify', meaning every access request must be authenticated, authorized, and continuously validated regardless of location or previous trust."
    },
    {
      "id": 2,
      "question": "In STRIDE threat modeling, what does the 'T' represent?",
      "options": [
        "Tracking",
        "Tampering",
        "Transmission",
        "Throttling"
      ],
      "correctAnswer": 1,
      "explanation": "In STRIDE methodology, 'T' stands for Tampering, which refers to unauthorized modification of data or code. STRIDE covers Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, and Elevation of Privilege."
    },
    {
      "id": 3,
      "question": "What is the primary purpose of PKCE in OAuth2 flows?",
      "options": [
        "To encrypt tokens",
        "To prevent authorization code interception attacks",
        "To manage user sessions",
        "To validate client credentials"
      ],
      "correctAnswer": 1,
      "explanation": "PKCE (Proof Key for Code Exchange) prevents authorization code interception attacks by using a dynamically generated code verifier and challenge, making intercepted authorization codes useless without the original code verifier."
    },
    {
      "id": 4,
      "question": "Under GDPR, what is 'data protection by design and by default'?",
      "options": [
        "Using default encryption settings",
        "Implementing privacy controls from the system design phase onwards",
        "Protecting only personal data",
        "Using standard security frameworks"
      ],
      "correctAnswer": 1,
      "explanation": "Data protection by design and by default means implementing appropriate technical and organizational measures at the design phase and ensuring that only personal data necessary for each specific purpose is processed by default."
    },
    {
      "id": 5,
      "question": "What is the main advantage of envelope encryption?",
      "options": [
        "Faster encryption speed",
        "Ability to encrypt large amounts of data while protecting the data encryption key",
        "Smaller key sizes",
        "Better compression"
      ],
      "correctAnswer": 1,
      "explanation": "Envelope encryption allows encrypting large amounts of data with a data encryption key (DEK), while the DEK itself is encrypted with a key encryption key (KEK), providing scalable encryption with centralized key management."
    },
    {
      "id": 6,
      "question": "In RBAC, what is the principle of least privilege?",
      "options": [
        "Give users maximum permissions initially",
        "Grant only the minimum permissions necessary to perform job functions",
        "Remove all permissions by default",
        "Share permissions among team members"
      ],
      "correctAnswer": 1,
      "explanation": "The principle of least privilege means granting users only the minimum permissions necessary to perform their job functions, reducing the potential impact of compromised accounts or insider threats."
    },
    {
      "id": 7,
      "question": "What is the purpose of SAST (Static Application Security Testing)?",
      "options": [
        "Testing running applications",
        "Analyzing source code for security vulnerabilities without executing it",
        "Testing network configurations",
        "Monitoring application performance"
      ],
      "correctAnswer": 1,
      "explanation": "SAST analyzes source code, bytecode, or binary code for security vulnerabilities without executing the application, enabling early detection of security issues in the development lifecycle."
    },
    {
      "id": 8,
      "question": "What is defense-in-depth security strategy?",
      "options": [
        "Using only one strong security control",
        "Implementing multiple layers of security controls",
        "Focusing only on perimeter security",
        "Relying on user training alone"
      ],
      "correctAnswer": 1,
      "explanation": "Defense-in-depth implements multiple layers of security controls so that if one layer fails, other layers continue to provide protection, creating a comprehensive security posture."
    },
    {
      "id": 9,
      "question": "Under GDPR, what is the maximum timeframe to report a data breach to authorities?",
      "options": [
        "24 hours",
        "72 hours",
        "7 days",
        "30 days"
      ],
      "correctAnswer": 1,
      "explanation": "Under GDPR Article 33, organizations must report data breaches to the relevant supervisory authority within 72 hours of becoming aware of the breach, unless it's unlikely to result in risk to individuals."
    },
    {
      "id": 10,
      "question": "What is the primary purpose of Content Security Policy (CSP)?",
      "options": [
        "To encrypt web content",
        "To prevent cross-site scripting (XSS) attacks",
        "To manage user authentication",
        "To optimize website performance"
      ],
      "correctAnswer": 1,
      "explanation": "CSP is a security standard that helps prevent XSS attacks by allowing websites to declare which dynamic resources are allowed to load, effectively controlling the sources of content that browsers can execute."
    },
    {
      "id": 11,
      "question": "What is tokenization in data protection?",
      "options": [
        "Creating authentication tokens",
        "Replacing sensitive data with non-sensitive tokens",
        "Encrypting data with tokens",
        "Managing API tokens"
      ],
      "correctAnswer": 1,
      "explanation": "Tokenization replaces sensitive data with non-sensitive tokens that have no exploitable meaning or value, while maintaining a secure mapping between tokens and original data in a separate token vault."
    },
    {
      "id": 12,
      "question": "In threat modeling, what is the purpose of creating data flow diagrams?",
      "options": [
        "To optimize database performance",
        "To identify potential attack vectors and trust boundaries",
        "To design user interfaces",
        "To plan network topology"
      ],
      "correctAnswer": 1,
      "explanation": "Data flow diagrams in threat modeling help identify how data moves through the system, trust boundaries between components, and potential attack vectors where threats might exploit vulnerabilities."
    },
    {
      "id": 13,
      "question": "What is the main benefit of using Hardware Security Modules (HSMs)?",
      "options": [
        "Faster processing speed",
        "Tamper-resistant hardware for cryptographic key protection",
        "Lower cost than software solutions",
        "Easier key management"
      ],
      "correctAnswer": 1,
      "explanation": "HSMs provide tamper-resistant hardware specifically designed to protect and manage cryptographic keys, offering higher security assurance than software-based key storage solutions."
    },
    {
      "id": 14,
      "question": "What is the purpose of DAST (Dynamic Application Security Testing)?",
      "options": [
        "Testing source code quality",
        "Testing running applications for security vulnerabilities",
        "Testing database performance",
        "Testing user interface design"
      ],
      "correctAnswer": 1,
      "explanation": "DAST tests running applications by simulating attacks against the application in its deployed environment, identifying runtime security vulnerabilities that may not be apparent in static analysis."
    },
    {
      "id": 15,
      "question": "Under GDPR, what constitutes a valid legal basis for processing personal data?",
      "options": [
        "Company policy requirement",
        "Consent, contract, legal obligation, vital interests, public task, or legitimate interests",
        "User registration on website",
        "Business necessity alone"
      ],
      "correctAnswer": 1,
      "explanation": "GDPR Article 6 defines six lawful bases for processing: consent, contract performance, legal obligation compliance, vital interests protection, public task performance, and legitimate interests pursuit."
    },
    {
      "id": 16,
      "question": "What is session fixation and how can it be prevented?",
      "options": [
        "A performance issue; optimize database queries",
        "An attack where attackers fix session IDs; prevent by regenerating session IDs after authentication",
        "A caching problem; clear browser cache",
        "A network issue; use HTTPS"
      ],
      "correctAnswer": 1,
      "explanation": "Session fixation is an attack where an attacker fixes a user's session ID before authentication. It's prevented by regenerating session IDs after successful authentication and using secure session management practices."
    },
    {
      "id": 17,
      "question": "What is the purpose of certificate pinning in mobile applications?",
      "options": [
        "To improve app performance",
        "To prevent man-in-the-middle attacks by validating specific certificates",
        "To reduce network bandwidth",
        "To enable offline functionality"
      ],
      "correctAnswer": 1,
      "explanation": "Certificate pinning prevents man-in-the-middle attacks by ensuring the mobile app only accepts specific certificates or certificate authorities, rather than trusting any certificate in the device's trust store."
    },
    {
      "id": 18,
      "question": "What is the difference between authentication and authorization?",
      "options": [
        "They are the same thing",
        "Authentication verifies identity; authorization determines permissions",
        "Authentication is for users; authorization is for systems",
        "Authentication uses passwords; authorization uses tokens"
      ],
      "correctAnswer": 1,
      "explanation": "Authentication verifies who you are (identity verification), while authorization determines what you're allowed to do (permission checking). Both are essential but distinct security concepts."
    },
    {
      "id": 19,
      "question": "What is the purpose of security headers like HSTS?",
      "options": [
        "To improve website speed",
        "To enforce secure connections and prevent protocol downgrade attacks",
        "To manage user sessions",
        "To enable caching"
      ],
      "correctAnswer": 1,
      "explanation": "HSTS (HTTP Strict Transport Security) forces browsers to use HTTPS connections and prevents protocol downgrade attacks, ensuring all communication with the server remains encrypted."
    },
    {
      "id": 20,
      "question": "What is the principle of 'assume breach' in security architecture?",
      "options": [
        "Assume all systems will eventually be compromised and design accordingly",
        "Assume no security measures are needed",
        "Assume only external threats exist",
        "Assume breaches are impossible"
      ],
      "correctAnswer": 0,
      "explanation": "The 'assume breach' principle means designing security architecture with the assumption that systems will eventually be compromised, focusing on detection, containment, and recovery capabilities."
    },
    {
      "id": 21,
      "question": "What is the purpose of data loss prevention (DLP) systems?",
      "options": [
        "To backup data regularly",
        "To monitor and prevent unauthorized data exfiltration",
        "To compress data for storage",
        "To encrypt all data automatically"
      ],
      "correctAnswer": 1,
      "explanation": "DLP systems monitor, detect, and prevent unauthorized transmission or sharing of sensitive data, helping organizations protect confidential information from both internal and external threats."
    },
    {
      "id": 22,
      "question": "In OAuth2, what is the purpose of the state parameter?",
      "options": [
        "To store user preferences",
        "To prevent CSRF attacks during authorization",
        "To cache authentication data",
        "To manage session timeouts"
      ],
      "correctAnswer": 1,
      "explanation": "The state parameter in OAuth2 prevents Cross-Site Request Forgery (CSRF) attacks by providing a way to verify that the authorization response corresponds to the original authorization request."
    },
    {
      "id": 23,
      "question": "What is the difference between symmetric and asymmetric encryption?",
      "options": [
        "Symmetric is faster; asymmetric is slower",
        "Symmetric uses same key for encryption/decryption; asymmetric uses different keys",
        "Symmetric is more secure; asymmetric is less secure",
        "Symmetric is for files; asymmetric is for networks"
      ],
      "correctAnswer": 1,
      "explanation": "Symmetric encryption uses the same key for both encryption and decryption, while asymmetric encryption uses a pair of keys (public and private) where data encrypted with one key can only be decrypted with the other."
    },
    {
      "id": 24,
      "question": "What is the purpose of input validation in secure coding?",
      "options": [
        "To improve application performance",
        "To prevent injection attacks and ensure data integrity",
        "To format user interface elements",
        "To manage database connections"
      ],
      "correctAnswer": 1,
      "explanation": "Input validation prevents injection attacks (SQL injection, XSS, etc.) by ensuring that all user input is properly validated, sanitized, and conforms to expected formats before processing."
    },
    {
      "id": 25,
      "question": "What is the concept of 'security by obscurity' and why is it problematic?",
      "options": [
        "A good security practice for hiding system details",
        "Relying on secrecy of implementation for security; problematic because it's not a substitute for proper security controls",
        "Using complex passwords",
        "Encrypting all communications"
      ],
      "correctAnswer": 1,
      "explanation": "Security by obscurity relies on keeping system details secret for protection. It's problematic because it's not a substitute for proper security controls and can create false confidence while hiding real vulnerabilities."
    },
    {
      "id": 26,
      "question": "What is the purpose of penetration testing?",
      "options": [
        "To test network speed",
        "To simulate real-world attacks and identify security vulnerabilities",
        "To optimize database performance",
        "To test user experience"
      ],
      "correctAnswer": 1,
      "explanation": "Penetration testing simulates real-world cyber attacks against systems to identify security vulnerabilities, assess the effectiveness of security controls, and provide recommendations for improvement."
    },
    {
      "id": 27,
      "question": "What is the difference between blacklist and whitelist approaches in security?",
      "options": [
        "Blacklist blocks known bad items; whitelist allows only known good items",
        "Blacklist is more secure than whitelist",
        "Blacklist is for users; whitelist is for applications",
        "They are the same approach"
      ],
      "correctAnswer": 0,
      "explanation": "Blacklist approaches block known bad items but allow everything else, while whitelist approaches only allow known good items and block everything else. Whitelist is generally more secure but may be less flexible."
    },
    {
      "id": 28,
      "question": "What is the purpose of security information and event management (SIEM)?",
      "options": [
        "To manage user passwords",
        "To collect, analyze, and correlate security events for threat detection",
        "To encrypt network traffic",
        "To manage software updates"
      ],
      "correctAnswer": 1,
      "explanation": "SIEM systems collect, analyze, and correlate security events from multiple sources to provide real-time threat detection, incident response capabilities, and compliance reporting."
    },
    {
      "id": 29,
      "question": "What is the concept of 'shift-left' in security?",
      "options": [
        "Moving security teams to the left side of the office",
        "Integrating security earlier in the development lifecycle",
        "Using left-handed security tools",
        "Shifting security responsibilities to junior developers"
      ],
      "correctAnswer": 1,
      "explanation": "Shift-left security means integrating security practices earlier in the software development lifecycle, enabling teams to identify and fix security issues during development rather than after deployment."
    },
    {
      "id": 30,
      "question": "What is the purpose of security awareness training?",
      "options": [
        "To teach employees technical security skills",
        "To educate employees about security threats and safe practices",
        "To replace technical security controls",
        "To reduce security budgets"
      ],
      "correctAnswer": 1,
      "explanation": "Security awareness training educates employees about security threats, safe practices, and their role in maintaining organizational security, helping create a human firewall against social engineering and other attacks."
    }
  ]
}
